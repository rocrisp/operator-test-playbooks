---
- set_fact:
    quay_release: "0.0.1"

- name: "Check for the existence of earlier releases of the operator on the quay.io app repository"
  shell: "curl -s -H \"Authorization: basic {{ quay_token }}\" https://quay.io/cnr/api/v1/packages/{{ quay_namespace }}/{{ package_name }}-test | {{ jq_bin_path }} '.[].release' | sort --version-sort | tail -n 1"
  register: quay_release_result
  no_log: true

- name: "Increment testing quay app release if exists"
  shell: "echo {{ quay_release_result.stdout }} | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf(\"%0*d\", length($NF), ($NF+1)%(10^length($NF))); print}'"
  register: quay_increment_release_result
  when:
    - quay_release_result is defined
    - quay_release_result.stdout is defined
    - quay_release_result.stdout != ""
    - quay_release_result.stdout != "null"

- name: "Set quay release to the incremented one if exists"
  set_fact:
    quay_release: "{{ quay_increment_release_result.stdout }}"
  when:
    - quay_increment_release_result is defined
    - quay_increment_release_result.stdout is defined
    - quay_increment_release_result.stdout != ""

- name: "Append the -test suffix to the packageName"
  shell: "{{ yq_bin_path }} w -i {{ package_path }} 'packageName' '{{ package_name }}-test'"

- name: "Push the operator metadata to the private quay.io repository"
  shell: "operator-courier push {{ operator_work_dir }} {{ quay_namespace }} {{ package_name }}-test {{ quay_release }} \"basic {{ quay_token }}\""
  no_log: false

- name: "Create {{ openshift_namespace }} project"
  shell: "{{ oc_bin_path }} new-project {{ openshift_namespace }}"
  register: openshift_namespace_result
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Inject kube_objects on OpenShift cluster for Operator certification"
  block:
    - name: "Inject openshift kube_objects"
      include_role:
        name: inject_openshift_kube_objects
      vars:
        rsa_private_key: "{{ lookup('env', 'HOME') }}/.ssh/private_key"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when:
    - kube_objects is defined
    - kube_objects != "N/A"
    - kube_objects != "null"  

- name: "Create the olm operator files directory"
  shell: "mkdir -p {{ olm_operator_files_path }}"

- name: "Process the operatorgroup template"
  template:
    src: "operatorgroup.yml.j2"
    dest: "{{ olm_operator_files_path }}/operatorgroup.processed.yml"

- name: "Process the marketplacesecret template"
  template:
    src: "marketplacesecret.yml.j2"
    dest: "{{ olm_operator_files_path }}/marketplacesecret.processed.yml"

- name: "Process the subscription template"
  template:
    src: "subscription.yml.j2"
    dest: "{{ olm_operator_files_path }}/subscription.yml"

- name: "Process the catalogsource template"
  template:
    src: "catalogsource.yml.j2"
    dest: "{{ olm_operator_files_path }}/catalogsource.yml"

- name: "Create all processed resources in the deploy directory"
  shell: "for f in $(find {{ olm_operator_files_path }} -maxdepth 1 -name \"*processed.yml\"); do {{ oc_bin_path }} create -f $f; done"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Create the catalogsource"
  shell: "{{ oc_bin_path }} apply -f {{ olm_operator_files_path }}/catalogsource.yml"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Wait for the catalogsource pod to start up"
  shell: "{{ oc_bin_path }} get pods -n openshift-marketplace | grep test-operators- | grep Running"
  register: operator_source_result
  retries: 60
  delay: 10
  until: operator_source_result.rc == 0
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Check if scorecard secret exists"
  stat:
    path: "{{ operator_work_dir }}/../scorecard.secret.yaml"
  register: scorecard_secret_result

- name: "Create the scorecard secret if it exists"
  shell: "{{ oc_bin_path }} create -f {{ operator_work_dir }}/../scorecard.secret.yaml"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: scorecard_secret_result.stat.exists == True

- name: "Create the subscription"
  shell: "{{ oc_bin_path }} create -f {{ olm_operator_files_path }}/subscription.yml"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Wait for the operator {{ operator_pod_name }} pod to start up"
  shell: "{{ oc_bin_path }} get pods | grep {{ operator_pod_name }} | grep Running"
  register: operator_result
  retries: 90
  delay: 10
  until: operator_result.rc == 0
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Get the details of the deployed CSVs"
  shell: "{{ oc_bin_path }} describe csvs"
  register: csv_describe_result
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Output the CSV description to a debug file"
  copy:
    content: "{{ csv_describe_result.stdout }}"
    dest: "{{ work_dir }}/olm-operator-csv-debug.txt"
  when: csv_describe_result.stdout != ""

- name: "Get the pod status of the deployed operator"
  shell: "{{ oc_bin_path }} get --output=name pods | grep {{ operator_pod_name }} | cut -f1 | xargs -I{} {{ oc_bin_path }} get {} -o yaml | {{ yq_bin_path }} r - \"status\""
  register: operator_pod_result
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: csv_describe_result.stdout != ""

- name: "Output the operator pod log to a debug file"
  copy:
    content: "{{ operator_pod_result.stdout }}"
    dest: "{{ work_dir }}/olm-operator-pod-debug.txt"
  when:
    - csv_describe_result.stdout != ""
    - operator_pod_result.stdout != ""

- name: "Get the pod container logs of the deployed operator"
  shell: "{{ oc_bin_path }} get --output=name pods | grep {{ operator_pod_name }} | cut -d' ' -f1 | xargs -I{} {{ oc_bin_path }} logs {} -c {{ operator_container_name }}"
  register: operator_container_result
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: csv_describe_result.stdout != ""

- name: "Output the operator container log to a debug file"
  copy:
    content: "{{ operator_container_result.stdout }}"
    dest: "{{ work_dir }}/olm-operator-container-debug.txt"
  when:
    - csv_describe_result.stdout != ""
    - operator_container_result.stdout != ""

- name: "Get the catalogsource pod log"
  shell: "{{ oc_bin_path }} get --output=name pods -n openshift-marketplace | grep test-operators | cut -d' ' -f1 | xargs -I{} {{ oc_bin_path }} logs {} -n openshift-marketplace"
  register: catalog_source_result
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Output the catalogsource log to a debug file"
  copy:
    content: "{{ catalog_source_result.stdout }}"
    dest: "{{ work_dir }}/olm-catalog-source-debug.txt"
  when: catalog_source_result.stdout is defined

- name: "Get the catalog-operator pod log"
  shell: "{{ oc_bin_path }} get --output=name pods -n openshift-operator-lifecycle-manager | grep catalog-operator | cut -d' ' -f1 | xargs -I{} {{ oc_bin_path }} logs {} -n openshift-operator-lifecycle-manager | tail -n 100"
  register: catalog_operator_result
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Output the catalog-operator log to a debug file"
  copy:
    content: "{{ catalog_operator_result.stdout }}"
    dest: "{{ work_dir }}/olm-catalog-operator-debug.txt"
  when: catalog_operator_result.stdout is defined

- name: "Get the InstallPlan debug output"
  shell: "{{ oc_bin_path }} describe installplan -n {{ openshift_namespace }}"
  register: installplan_result
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Output the InstallPlan debug output to a debug file"
  copy:
    content: "{{ installplan_result.stdout }}"
    dest: "{{ work_dir }}/olm-installplan-debug.txt"
  when: installplan_result.stdout is defined

- fail:
    msg: 'Operator deployment with OLM failed, check the olm-*.txt files for more details'
  when: operator_result.rc != 0
